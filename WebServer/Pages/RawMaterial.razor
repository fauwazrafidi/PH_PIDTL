@page "/rawmaterial"
@using System.Net.Http
@using Newtonsoft.Json
@using System.Diagnostics
@using SHARED

@inject HttpClient Http
@inject IWebHostEnvironment Environment
@inject IJSRuntime JSRuntime

<h1>Raw Material</h1>

<table class="table">
    <thead>
        <tr>
            @* <th>Id</th> *@
            <th>Part No</th>
            <th>Part Name</th>
            <th>Colour</th>
            <th>Lot/Batch No</th>
            <th>Machine No./Location</th>
            <th>Quantity//Unit</th>
            @* <th>Uom</th> *@
            <th>Customer/Vendor</th>
            <th>Checkout</th>
            <th>Checkin</th>
            <th></th>
            @* <th>QtyRemain</th> *@
        </tr>
    </thead>
    <tbody>
        @if (_items == null)
        {
            <tr><td colspan="12">Loading...</td></tr>
        }
        else
        {
            @foreach (var item in _items)
            {
                <tr>
                    @* <td>@item.id</td> *@
                    <td>@item.itemcode</td>
                    <td>@item.description</td>
                    <td>@item.description2</td>
                    <td>@item.batch</td>
                    <td>@item.location</td>
                    <td>@item.qty @item.uom</td>
                    @* <td>@item.uom</td> *@
                    <td>@item.remark2</td>
                    <td>@item.checkout?.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@item.checkin?.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(async () => { await ExportItem(item.id); })">Export</button>
                    </td>
                    @* <td>@item.qtyremain</td> *@
                </tr>
            }
        }
    </tbody>
</table>

<script>
    function downloadFile(byteArray, filename) { // Accept byte array directly
        var blob = new Blob([byteArray], { type: 'application/octet-stream' });
        var link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        link.click();
    }
</script>

@code {
    private List<PH_PIDTL> _items;
    protected override async Task OnInitializedAsync()
    {
        string apiUrl = "http://localhost:5198/api/PH_PIDTL/getItems?skip=0&take=50"; // Replace with your actual API URL
        HttpResponseMessage response = await Http.GetAsync(apiUrl);

        // Console.WriteLine(response);

        if (response.IsSuccessStatusCode)
        {
            try
            {
                // Read the content as a string
                string jsonString = await response.Content.ReadAsStringAsync();

                // Attempt deserialization using both methods
                _items = JsonConvert.DeserializeObject<List<PH_PIDTL>>(jsonString);

                // If deserialization as list fails, try for a single object (potential edge case)
                if (_items == null)
                {
                    var item = JsonConvert.DeserializeObject<PH_PIDTL>(jsonString);
                    if (item != null)
                    {
                        _items = new List<PH_PIDTL>() { item };
                    }
                }
            }
            catch (Exception ex)
            {
                // Handle any errors
                Console.WriteLine($"Error loading Raw Models: {ex.Message}");


            }
        }
    }



    private async Task ExportItem(int itemId)
    {
        string exportUrl = $"http://localhost:5198/api/PH_PIDTL/export/item/{itemId}?Id={itemId}&amount=5";
        Console.WriteLine(exportUrl);

        HttpResponseMessage response = await Http.GetAsync(exportUrl);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine(response.Content.Headers.ContentType.MediaType);
            // Check for content type indicating a downloadable file
                // Read the content as byte array
                byte[] fileBytes = await response.Content.ReadAsByteArrayAsync();

                // Trigger download using Javascript (explained below)
                await DownloadFile(fileBytes, "export.xlsx"); // Change filename based on response or logi
                // Handle success response (e.g., display success message)
                Console.WriteLine($"Export for item {itemId} initiated.");
        }
        else
        {
            // Handle error based on response status code
            Console.WriteLine($"Error exporting item {itemId}: {response.StatusCode}");
        }
    }

      private async Task DownloadFile(byte[] fileBytes, string filename)
    {
        await JSRuntime.InvokeAsync<object>("downloadFile", new object[] { fileBytes, filename });
    }

}